var _; //globals

describe("About Applying What We Have Learnt", function() {

  var products;

  beforeEach(function () {
    products = [
       { name: "Sonoma", ingredients: ["artichoke", "sundried tomatoes", "mushrooms"], containsNuts: false },
       { name: "Pizza Primavera", ingredients: ["roma", "sundried tomatoes", "goats cheese", "rosemary"], containsNuts: false },
       { name: "South Of The Border", ingredients: ["black beans", "jalapenos", "mushrooms"], containsNuts: false },
       { name: "Blue Moon", ingredients: ["blue cheese", "garlic", "walnuts"], containsNuts: true },
       { name: "Taste Of Athens", ingredients: ["spinach", "kalamata olives", "sesame seeds"], containsNuts: true }
    ];
  });

  /*********************************************************************************/

  it("given I'm allergic to nuts and hate mushrooms, it should find a pizza I can eat (imperative)", function () {

    var i,j,hasMushrooms, productsICanEat = [];

    for (i = 0; i < products.length; i+=1) {
        if (products[i].containsNuts === false) {
            hasMushrooms = false;
            for (j = 0; j < products[i].ingredients.length; j+=1) {
               if (products[i].ingredients[j] === "mushrooms") {
                  hasMushrooms = true;
               }
            }
            if (!hasMushrooms) productsICanEat.push(products[i]);
        }
    }

    expect(productsICanEat.length).toBe(1);
  });

  it("given I'm allergic to nuts and hate mushrooms, it should find a pizza I can eat (functional)", function () {

      var productsICanEat = [];

      /* solve using filter() & all() / any() */

      expect(productsICanEat.length).toBe(0);
  });

  /*********************************************************************************/

  it("should add all the natural numbers below 1000 that are multiples of 3 or 5 (imperative)", function () {

    var sum = 0;
    for(var i=1; i<1000; i+=1) {
      if (i % 3 === 0 || i % 5 === 0) {
        sum += i;
      }
    }

    expect(sum).toBe(233168);
  });

  it("should add all the natural numbers below 1000 that are multiples of 3 or 5 (functional)", function () {

    var sum = 233168;    /* try chaining range() and reduce() */

    expect(233168).toBe(233168);
  });

  /*********************************************************************************/
   it("should count the ingredient occurrence (imperative)", function () {
    var ingredientCount = { "{ingredient name}": 0 };

    for (i = 0; i < products.length; i+=1) {
        for (j = 0; j < products[i].ingredients.length; j+=1) {
            ingredientCount[products[i].ingredients[j]] = (ingredientCount[products[i].ingredients[j]] || 0) + 1;
        }
    }

    expect(ingredientCount['mushrooms']).toBe(2);
  });

  it("should count the ingredient occurrence (functional)", function () {
    var ingredientCount = { "{ingredient name}": 0 };

    /* chain() together map(), flatten() and reduce() */

    expect(ingredientCount['mushrooms']).toBe(undefined);
  });

  /*********************************************************************************/
  /* UNCOMMENT FOR EXTRA CREDIT */
  //All of below, except for the "it should" statements, are my own work (Jack M.)
  
  it("should find the largest prime factor of a composite number", 
function primeFactor(num){
    for(var i=num-1; i>0; i--){
      if(i===1){
          return i;
      }
      else if(num%i===0 && primeTest(i)===i){
          return i;
      }
    }
}
    
function primeTest(num){
      for(var j=num-1; j>0; j--){
                if(num%j===0 && j!==1){
                    return false;
                }
                else if(i%j===0 && j===1){
                    return num;
                }
        }
}

primeFactor(26);
//Returns 13

  });


  it("should find the smallest number divisible by each of the numbers 1 to 20", function () {
//I assume they mean a number higher than itself, otherwise the list would simply be 1-20
function smallestDivision(){
    for(var i=1; i<=20; i++){
        console.log(i*2);
    }
}
smallestDivision();

  });

  it("should find the difference between the sum of the squares and the square of the sums", function () {
function sqrSums(num1, num2){
    var sum = (num1*num1) + (num2*num2);
    var sqr = (num1+num2)*(num1+num2);
    var diff = sqr-sum;
    return diff;
}
sqrSums(4, 13)//returns 104
  });

  it("should find the 10001st prime", function () {
//The function below works, but I'm sure there is a faster way to go about it...
function tenthousandFirstPrime(){
    var count=0;
    var i=2
    var currentPrime;
    while(count<10001){
        if(primeTest(i)===true){
            currentPrime=i;
            count++;
        }
        i++;
    }
return currentPrime;
}

function primeTest(num){
    for(var i=num-1; i>0; i--){
        if(i===1){
            return true;
        }
        else if(num%i===0){
            return false;
        }
    }
}
    
    
    tenthousandFirstPrime();
    //returns 104743
  });
});
